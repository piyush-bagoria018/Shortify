// No 'use client' here
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";

import React from "react";
import "./globals.css";

function BackgroundDecoration() {
  return (
    <div
      aria-hidden
      className="pointer-events-none fixed inset-0 z-0 overflow-hidden"
      style={{ minHeight: "100vh" }}
    >
      {/* Twinkling stars */}
      <div className="absolute inset-0 w-full h-full z-0">
        {[...Array(60)].map((_, i) => (
          <div
            key={i}
            className="absolute rounded-full bg-white opacity-70"
            style={{
              width: `${Math.random() * 2 + 1}px`,
              height: `${Math.random() * 2 + 1}px`,
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
              animation: `star-twinkle ${
                3 + Math.random() * 3
              }s ease-in-out infinite`,
              animationDelay: `${Math.random() * 4}s`,
              filter: "drop-shadow(0 0 6px #fff8)",
            }}
          />
        ))}
      </div>
      {/* Animated SVG rings */}
      <svg
        width="100%"
        height="100%"
        viewBox="0 0 1920 1080"
        fill="none"
        className="absolute inset-0 w-full h-full"
        style={{ opacity: 0.18 }}
      >
        <g>
          <circle
            cx="960"
            cy="540"
            r="400"
            stroke="#4F8CFF"
            strokeWidth="2"
            strokeDasharray="12 12"
          >
            <animateTransform
              attributeName="transform"
              type="rotate"
              from="0 960 540"
              to="360 960 540"
              dur="18s"
              repeatCount="indefinite"
            />
          </circle>
          <circle
            cx="960"
            cy="540"
            r="600"
            stroke="#E052CB"
            strokeWidth="2"
            strokeDasharray="20 20"
          >
            <animateTransform
              attributeName="transform"
              type="rotate"
              from="360 960 540"
              to="0 960 540"
              dur="28s"
              repeatCount="indefinite"
            />
          </circle>
        </g>
      </svg>
      {/* Floating planet SVG */}
      <svg
        width="120"
        height="120"
        viewBox="0 0 120 120"
        className="absolute left-[55%] top-[30%] animate-planet-spin"
        style={{ zIndex: 1, opacity: 0.22 }}
      >
        <defs>
          <radialGradient id="planetGradient" cx="50%" cy="50%" r="50%">
            <stop offset="0%" stopColor="#42e695" />
            <stop offset="100%" stopColor="#144ee3" />
          </radialGradient>
        </defs>
        <circle cx="60" cy="60" r="48" fill="url(#planetGradient)" />
        <ellipse
          cx="60"
          cy="70"
          rx="38"
          ry="10"
          fill="none"
          stroke="#eb568e"
          strokeWidth="2"
          opacity="0.7"
        />
      </svg>
      {/* Floating animated shapes */}
      <div className="absolute left-0 top-0 w-full h-full">
        {/* 3D floating squares moved here for global background */}
        <div
          className="hidden md:block absolute left-[10%] top-[18%] w-40 h-40 rounded-2xl bg-[#23263a] border border-[#23263a] opacity-80 animate-float-3d"
          style={{
            filter: "blur(0.5px)",
          }}
        />
        <div
          className="hidden md:block absolute right-[12%] top-[45%] w-32 h-32 rounded-2xl bg-[#23263a] border border-[#23263a] opacity-70 animate-float-3d"
          style={{
            filter: "blur(1px)",
          }}
        />
        {/* Example floating squares */}
        <div className="absolute left-[8%] top-[12%] animate-float-slow bg-[#144ee3] rounded-[24%] w-24 h-24 shadow-xl opacity-70" />
        <div className="absolute right-[10%] top-[22%] animate-float bg-[#eb568e] rounded-[30%] w-20 h-20 shadow-xl opacity-60" />
        <div className="absolute left-[15%] bottom-[18%] animate-float-rev bg-[#42e695] rounded-[20%] w-28 h-28 shadow-xl opacity-60" />
        <div className="absolute right-[12%] bottom-[10%] animate-float bg-[#3bb2b8] rounded-[28%] w-24 h-24 shadow-xl opacity-70" />
      </div>
    </div>
  );
}

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased min-h-screen transition-colors duration-300`}
      >
        {/* Background always at z-0 */}
        <BackgroundDecoration />
        {/* Main content always above background */}
        <div className="relative z-10">{children}</div>
      </body>
    </html>
  );
}
